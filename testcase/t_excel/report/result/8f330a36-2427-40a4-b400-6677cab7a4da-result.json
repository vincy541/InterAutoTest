{"name": "test_run[case0]", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting value: line 1 column 16 (char 15)", "trace": "self = <testcase.t_excel.test_excel_case.TestExcel object at 0x106586910>\ncase = {'cookies': None, 'headers': None, 'status_code': None, '前置条件': '存在项目', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        url = ConfigYaml().get_conf_url() + case[data_key.url]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n        # 判断headers是否存在，json转义（因为excel是字符形的）\n        if headers:\n            header = json.loads(headers)\n        else:\n            header = headers\n        # 增加cookies\n        if cookies:\n            cookie = json.loads(cookies)\n        else:\n            cookie = cookies\n        # 1、验证前置条件\n        if pre_exec:\n            pass\n            # 2、找到前置用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为:%s\" % pre_case)\n        # 2).接口请求\n        request = Request()\n        # params 转义json\n        # 验证params有没有内容\n        if len(str(params).strip()) is not 0:\n>           params = json.loads(params)\n\ntest_excel_case.py:73: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:357: in loads\n    return _default_decoder.decode(s)\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x103d58730>\ns = '{\"project_id\": pj_r}', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 16 (char 15)\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/decoder.py:355: JSONDecodeError"}, "parameters": [{"name": "case", "value": "{'用例ID': 'pjdetail_1', '模块': '项目', '接口名称': '查看项目详情', '请求URL': 'https://rockbang.com.cn/api/sss/auth/project_hub/project_details', '前置条件': '存在项目', '请求类型': 'get', '请求参数类型': 'json', '请求参数': '{\"project_id\": pj_r}', '预期结果': None, '实际结果': None, '备注': None, '是否运行': 'y', 'headers': None, 'cookies': None, 'status_code': None, '数据库验证': None}"}], "start": 1695559812505, "stop": 1695559812530, "uuid": "05de81a3-11f0-40e3-8d5a-7268c480a60a", "historyId": "6b8b5101b06605d05fcee72a7d65077a", "testCaseId": "b0dd58492ee2607414ac3c09700c5ff8", "fullName": "testcase.t_excel.test_excel_case.TestExcel#test_run", "labels": [{"name": "parentSuite", "value": "testcase.t_excel"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "lifaliangdeMacBook-Air.local"}, {"name": "thread", "value": "37939-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.t_excel.test_excel_case"}]}