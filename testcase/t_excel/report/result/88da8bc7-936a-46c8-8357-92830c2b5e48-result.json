{"name": "test_run[case0]", "status": "broken", "statusDetails": {"message": "AttributeError: 'str' object has no attribute 'read'", "trace": "self = <testcase.t_excel.test_excel_case.TestExcel object at 0x117d61ac0>\ncase = {'cookies': '{\"sid\": \"41fb8df9-d426-4eda-bd2f-b2d586535137\"}', 'headers': None, 'status_code': 1, '前置条件': '存在项目', ...}\n\n    @pytest.mark.parametrize(\"case\", run_list)\n    def test_run(self, case):\n        # data_key = ExcelConfig.DataConfig\n        # run_list第1个用例，用例，key获取values\n        url = ConfigYaml().get_conf_url() + case[data_key.url]+case[data_key.params]\n        print(url)\n        case_id = case[data_key.case_id]\n        case_model = case[data_key.case_model]\n        case_name = case[data_key.case_name]\n        pre_exec = case[data_key.pre_exec]\n        method = case[data_key.method]\n        params_type = case[data_key.params_type]\n        params = case[data_key.params]\n        expect_result = case[data_key.expect_result]\n        headers = case[data_key.headers]\n        cookies = case[data_key.cookies]\n        code = case[data_key.code]\n        db_verify = case[data_key.db_verify]\n    \n        # 判断headers是否存在，json转义（因为excel是字符形的）\n        if headers:\n            header = json.loads(headers)\n        else:\n            header = headers\n        # 增加cookies\n        if cookies:\n            cookie = json.loads(cookies)\n        else:\n            cookie = cookies\n        # 1、验证前置条件\n        if pre_exec:\n            pass\n            # 2、找到前置用例\n            # 前置测试用例\n            pre_case = data_init.get_case_pre(pre_exec)\n            print(\"前置条件信息为:%s\" % pre_case)\n>           self.run_pre(pre_case)\n\ntest_excel_case.py:118: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_excel_case.py:78: in run_pre\n    cookie = Base.json_parse(cookies)\n../../common/Base.py:31: in json_parse\n    return json.load(data) if data else data\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nfp = '{\"sid\": \"41fb8df9-d426-4eda-bd2f-b2d586535137\"}', cls = None\nobject_hook = None, parse_float = None, parse_int = None, parse_constant = None\nobject_pairs_hook = None, kw = {}\n\n    def load(fp, *, cls=None, object_hook=None, parse_float=None,\n            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):\n        \"\"\"Deserialize ``fp`` (a ``.read()``-supporting file-like object containing\n        a JSON document) to a Python object.\n    \n        ``object_hook`` is an optional function that will be called with the\n        result of any object literal decode (a ``dict``). The return value of\n        ``object_hook`` will be used instead of the ``dict``. This feature\n        can be used to implement custom decoders (e.g. JSON-RPC class hinting).\n    \n        ``object_pairs_hook`` is an optional function that will be called with the\n        result of any object literal decoded with an ordered list of pairs.  The\n        return value of ``object_pairs_hook`` will be used instead of the ``dict``.\n        This feature can be used to implement custom decoders.  If ``object_hook``\n        is also defined, the ``object_pairs_hook`` takes priority.\n    \n        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``\n        kwarg; otherwise ``JSONDecoder`` is used.\n        \"\"\"\n>       return loads(fp.read(),\n            cls=cls, object_hook=object_hook,\n            parse_float=parse_float, parse_int=parse_int,\n            parse_constant=parse_constant, object_pairs_hook=object_pairs_hook, **kw)\nE       AttributeError: 'str' object has no attribute 'read'\n\n/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.8/lib/python3.8/json/__init__.py:293: AttributeError"}, "parameters": [{"name": "case", "value": "{'用例ID': 'pjdetail_1', '模块': '项目', '接口名称': '查看项目详情', '请求URL': '/project_hub/project_details/', '前置条件': '存在项目', '请求类型': 'GET', '请求参数类型': 'json', '请求参数': 'MPJ230921000011', '预期结果': 'success', '实际结果': None, '备注': None, '是否运行': 'y', 'headers': None, 'cookies': '{\"sid\": \"41fb8df9-d426-4eda-bd2f-b2d586535137\"}', 'status_code': 1, '数据库验证': None}"}], "start": 1700305316681, "stop": 1700305316700, "uuid": "38e9643e-9196-4665-a9f8-9dcc44192d02", "historyId": "f1e11b3d0fcf5ae0826123db50a6b3f5", "testCaseId": "b0dd58492ee2607414ac3c09700c5ff8", "fullName": "testcase.t_excel.test_excel_case.TestExcel#test_run", "labels": [{"name": "parentSuite", "value": "testcase.t_excel"}, {"name": "suite", "value": "test_excel_case"}, {"name": "subSuite", "value": "TestExcel"}, {"name": "host", "value": "lifaliangdeMacBook-Air.local"}, {"name": "thread", "value": "11120-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.t_excel.test_excel_case"}]}