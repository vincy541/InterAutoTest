{"name": "test_complete_booking", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "def test_complete_booking():\n        # 1、初始化数据库对象\n        conn = init_db(\"db_1\")\n        # 2、查询结果\n        res_db = conn.fetchone(\n            \"select * from shipping_voucher where shipping_document_id  ='52XSeTmQLUC' and type='Booking'\")\n        print(\"数据库查询结果，订舱委托id：\", res_db['id'])\n    \n        # 一、完成「订舱委托」任务\n        booking_url = base_url + \"/shipping_written_material/booking/\" + res_db['id'] + \"?provide_from_order_hub=true\"\n        # 1.读取yaml文件\n        filling_data = YamlReader(\"../../data/filling_booking.yml\").data()\n        # 获取sid\n        cookie = {\n            \"sid\": common.get_sid()\n        }\n        request = Request()\n        r = request.post(booking_url, json=filling_data, cookies=cookie)\n        print(r)\n        # AssertUtil().assert_code(r[\"code\"], 200)\n    \n        # 判断「订舱委托」任务是否已完成\n        # 1.获取「订舱」执行单id，传入货运单ID\n        select_id = {\n            \"groupId\": \"52XSeTmQLUC\"\n        }\n        ticket_details = common.ticket_details(select_id)\n        # print(ticket_details.json())\n        booking_ticket_type = '0604001'\n        # 遍历结果\n        for voucher_ticket in ticket_details.json()['content']['ticketDetails']:\n            if voucher_ticket['ticket']['type'] == booking_ticket_type:\n                # 找到匹配的执行单，获取执行单id\n                booking_ticket_id = voucher_ticket['ticket']['id']\n                # print(\"订舱委托执行单id：\", booking_ticket_id)\n    \n                # 找到当前执行单下的「订舱委托」任务，校验任务为已完成\n                select_id = {\n                    \"ticketIds\": [f\"{booking_ticket_id}\"]\n                }\n                task_details = common.task_detail(select_id)\n                # 订舱委托任务type=0604001001\n                booking_task_type = '0604001001'\n                for ticket_details in task_details.json()['content']['taskDetails']:\n                    if ticket_details['task']['type'] == booking_task_type:\n                        # 匹配「订舱委托」任务，获取任务状态\n                        booking_task_status = ticket_details['task']['status']\n                        print(\"「订舱信息」任务状态为：\", booking_task_status)\n                        # assert booking_task_status == 6\n                        if AssertUtil.assert_body(booking_task_status, booking_task_status, 6):\n                            print(\"成功完成【订舱委托】任务\")\n                            break\n                        else:\n                            # 如果没有找到匹配的任务\n                            print(\"「订舱委托」任务，未完成\")\n    \n                # booking发送货代任务type=0604001002\n                booking_send_task_type = '0604001002'\n                for ticket_details in task_details.json()['content']['taskDetails']:\n                    if ticket_details['task']['type'] == booking_send_task_type:\n                        # 匹配「booking发送货代」任务，获取任务uid和id\n                        booking_send_task_id = ticket_details['task']['id']\n                        booking_send_task_uid = ticket_details['task']['uid']\n                        print(\"「booking发送货代」任务id：\", booking_send_task_id)\n                        print(\"「booking发送货代」任务uid：\", booking_send_task_uid)\n    \n                        # 二、完成「booking发送货代」任务\n                        booking_send_url = f\"{base_url}/order_hub/save_task_content\"\n                        booking_send_data = {\n                            \"data\": \"{}\",\n                            \"taskUid\": booking_send_task_uid,\n                            \"taskId\": booking_send_task_id\n                        }\n                        request = Request()\n                        r = request.post(booking_send_url, json=booking_send_data, cookies=cookie)\n                        # print(r)\n                        # 验证「booking发送货代」任务完成\n                        booking_send_task_status = ticket_details['task']['status']\n                        print(\"「booking发送货代」任务状态为：\", booking_send_task_status)\n                        # assert booking_send_task_status == 6\n                        if AssertUtil.assert_body(booking_send_task_status, booking_send_task_status, 6):\n                            print(\"成功完成「booking发送货代」任务\")\n                        else:\n                            # 如果没有找到匹配的任务\n                            print(\"「booking发送货代」任务，未完成\")\n    \n        # 三、完成「货代放舱/SO上传」任务\n        # 查询数据库，获取货代放舱任务的id\n        db_forwarder_id = conn.fetchone(\n            \"select * from shipping_voucher where shipping_document_id  ='52XSeTmQLUC' and type='ShippingOrder'\")\n        print(\"数据库查询结果，货代放舱id：\", db_forwarder_id['id'])\n    \n        # 获取url\n        forwarder_url = base_url + \"/shipping_written_material/forwarder/\" + db_forwarder_id['id'] + \"?provide_from_order_hub=true\"\n        # 获取请求参数\n        forwarder_data = YamlReader(\"../../data/voucher/filling_forwarder.yml\").data()\n        request = Request()\n        r = request.post(forwarder_url, json=forwarder_data, cookies=cookie)\n        print(r)\n        AssertUtil().assert_code(r[\"code\"], 200)\n        # 判断货代放仓任务是否完成\n        # 货代放仓任务type = 0604001003\n        # forwarder_task_type = '0604001003'\n        # 传入请求参数\n        select_id = {\n            \"groupId\": \"52XSeTmQLUC\"\n        }\n        ticket_type = '0604001'\n        task_type = '0604001003'\n        r = common.task_status(select_id, ticket_type, task_type)\n        if r == 6:\n            print(\"「货代放仓」任务正常完成\")\n    \n        # 四、完成「SO发送工厂」任务\n        # 1.执行任务\n        so_url = f\"{base_url}/common_hub/get_task_type_detail\"\n        so_data = {\n            \"code\": \"0604001004\"\n        }\n        r = request.post(so_url, json=so_data, cookies=cookie)\n        print(r['body']['content']['data']['simpleConfigValue'])\n>       if AssertUtil.assert_in_body(r['body']['content']['data']['simpleConfigValue'], r['body']['content']['data']['simpleConfigValue'], '确认完成”SO发送工厂“任务？'):\n\ntest_voucher.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = '{\"schema\":{\"type\":\"object\",\"properties\":{\"a7jqfylfcvg\":{\"type\":\"string\",\"x-index\":0,\"x-component\":\"Text\",\"x-designabl...tent\":\"center\"},\"content\":\"确认完成”SO发送工厂“任务？\"}}},\"x-designable-id\":\"318k3ytoxy0\"},\"form\":{\"labelCol\":6,\"wrapperCol\":12}}'\nbody = '\"{\\\\\"schema\\\\\":{\\\\\"type\\\\\":\\\\\"object\\\\\",\\\\\"properties\\\\\":{\\\\\"a7jqfylfcvg\\\\\":{\\\\\"type\\\\\":\\\\\"string\\\\\",\\\\\"x-index\\\\\":0,...u4efb\\\\u52a1\\\\uff1f\\\\\"}}},\\\\\"x-designable-id\\\\\":\\\\\"318k3ytoxy0\\\\\"},\\\\\"form\\\\\":{\\\\\"labelCol\\\\\":6,\\\\\"wrapperCol\\\\\":12}}\"'\nexpected_body = '确认完成”SO发送工厂“任务？'\n\n    def assert_in_body(self, body, expected_body):\n        \"\"\"\n        验证返回结果是否包含期望结果\n        :param body:\n        :param expected_body:\n        :return:\n        \"\"\"\n        # try:\n        #     body = json.dumps(body)\n        #     assert expected_body in body\n        #     return True\n        # except:\n        #     self.log.error(\"不包含或者body错误,body is %s,expected_body is %s\" % (body, expected_body))\n        #     raise\n    \n        body = json.dumps(body)\n>       assert expected_body in body\nE       AssertionError\n\n../../utils/AssertUtil.py:64: AssertionError"}, "attachments": [{"name": "log", "source": "3fb12515-161a-458d-a695-be83dd12b409-attachment.txt", "type": "text/plain"}], "start": 1703175285845, "stop": 1703175289789, "uuid": "714f07f1-4f7e-4bfa-b462-5bd498ad6329", "historyId": "66a18088793d7fd43ee8f9e98cd662f1", "testCaseId": "66a18088793d7fd43ee8f9e98cd662f1", "fullName": "testcase.voucher.test_voucher#test_complete_booking", "labels": [{"name": "parentSuite", "value": "testcase.voucher"}, {"name": "suite", "value": "test_voucher"}, {"name": "host", "value": "lifaliangdeMacBook-Air.local"}, {"name": "thread", "value": "35785-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.voucher.test_voucher"}]}